
val x86_push_general_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_push_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-PUSH-GENERAL-REGISTER";
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let reg : int = loghead(3, unsigned(opcode));
    let sailval : bits(64) = rgfi_size(bits_of_int(operand_size, 4), reg_index(bits_of_int(reg, 3), rex_byte, 0b00), rex_byte);
    let badlength? : option(int) = check_instruction_length(start_rip, temp_rip, 0b000);
    if is_some(badlength?) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(sailval), alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    write_sptr(proc_mode, new_rsp);
    write_iptr(proc_mode, temp_rip)
}

val x86_push_ev : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_push_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-PUSH-EV";
    let r_m : bits(3) = modr_m_get_r_m(modr_m);
    let mod_var : bits(2) = modr_m_get_mod(modr_m);
    let reg : bits(3) = modr_m_get_reg(modr_m);
    let p2 : bits(8) = prefixes_get_seg(prefixes);
    let p4? : bool = 0x67 == prefixes_get_adr(prefixes);
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let seg_reg : {|0, 1, 2, 3, 4, 5|} = select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib);
    let (flg0, e, increment_rip_by, e_addr) : (option(string), bits(128), {|0, 1, 2, 4|}, sbits(64)) = x86_operand_from_modr_m_and_sib_bytes(proc_mode, 0b0, operand_size, true, false, seg_reg, p4?, temp_rip, rex_byte, r_m, mod_var, sib, 0b000);
    let increment_rip_by : bits(3) = bits_of_int(increment_rip_by, 3);
    if is_some(flg0) then throw(Emsg("Model state error: :X86-OPERAND-FROM-MODR/M-AND-SIB-BYTES"));
    let (flg, temp_rip) : (option(string), sbits(49)) = add_to_iptr(proc_mode, temp_rip, sail_zero_extend(increment_rip_by, 48));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"));
    let badlength? : option(int) = check_instruction_length(start_rip, truncate(temp_rip, 48), 0b000);
    if is_some(badlength?) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(e), alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    write_sptr(proc_mode, new_rsp);
    write_iptr(proc_mode, truncate(temp_rip, 48))
}

val x86_push_i : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_push_i (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-PUSH-I";
    let byte_imm? : bool = opcode == 0x6a;
    let imm_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, byte_imm?, rex_byte, true, prefixes, false, false, false);
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg0, imm) : (option(string), sbits(64)) = rime_size(proc_mode, imm_size, sail_sign_extend(temp_rip, 64), 1, ":X", false, struct { mem_ptr? = false });
    let imm : sbits(32) = truncate(imm, 32);
    if is_some(flg0) then throw(Emsg("Model state error: :IMM-RIME-SIZE-ERROR"));
    let (flg, temp_rip) : (option(string), sbits(49)) = add_to_iptr(proc_mode, temp_rip, bits_of_int(imm_size, 48));
    let temp_rip : sbits(48) = truncate(temp_rip, 48);
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':TEMP-RIP-NOT-CANONICAL', 'TEMP-RIP']"));
    let badlength? : option(int) = check_instruction_length(start_rip, temp_rip, 0b000);
    if is_some(badlength?) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"));
    let flg1 : option(string) = wme_size(proc_mode, operand_size, new_rsp, 2, nat_of_int(loghead(ash(operand_size, 3), signed(imm))), alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg1) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    write_sptr(proc_mode, new_rsp);
    write_iptr(proc_mode, temp_rip)
}

val x86_push_segment_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_push_segment_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-PUSH-SEGMENT-REGISTER";
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let sailval : bits(16) = seg_visibles[(match opcode {
      14 => 1,
      22 => 2,
      30 => 3,
      6 => 0,
      160 => 4,
      _ => 5
    }) : {|0, 1, 2, 3, 4, 5|}];
    let flg : option(string) = wme_size(proc_mode, if operand_size == 4 then 2 else {
        operand_size
    }, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(sailval), alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    write_sptr(proc_mode, new_rsp);
    write_iptr(proc_mode, temp_rip)
}

val x86_pop_general_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_pop_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-POP-GENERAL-REGISTER";
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg0, sailval) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg0) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    let reg : bits(8) = logand(opcode, 0x07);
    let badlength? : option(int) = check_instruction_length(start_rip, temp_rip, 0b000);
    if is_some(badlength?) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"));
    write_sptr(proc_mode, new_rsp);
    write_rgfi_size(bits_of_int(operand_size, 4), reg_index(truncate(reg, 3), rex_byte, 0b00), unsigned(sailval), rex_byte);
    write_iptr(proc_mode, temp_rip)
}

val x86_pop_ev : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_pop_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-POP-EV";
    let r_m : bits(3) = modr_m_get_r_m(modr_m);
    let mod_var : bits(2) = modr_m_get_mod(modr_m);
    let reg : bits(3) = modr_m_get_reg(modr_m);
    let p2 : bits(8) = prefixes_get_seg(prefixes);
    let p4? : bool = 0x67 == prefixes_get_adr(prefixes);
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let check_alignment? : bool = alignment_checking_enabled_p();
    let (flg0, sailval) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg0) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    let (flg1, addr, increment_rip_by) : (option(string), sbits(64), {|0, 1, 2, 4|}) = {
        if mod_var == 0b11 then {
            (None() : option(string), 0x0000000000000000, 0)
        } else {
            x86_effective_addr(proc_mode, p4?, temp_rip, rex_byte, r_m, mod_var, sib, 0b000)
        }
    };
    let increment_rip_by : bits(3) = bits_of_int(increment_rip_by, 3);
    if is_some(flg1) then throw(Emsg("Model state error: :X86-EFFECTIVE-ADDR-ERROR"));
    let seg_reg : {|0, 1, 2, 3, 4, 5|} = select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib);
    let (flg, temp_rip) : (option(string), sbits(49)) = add_to_iptr(proc_mode, temp_rip, sail_zero_extend(increment_rip_by, 48));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"));
    let badlength? : option(int) = check_instruction_length(start_rip, truncate(temp_rip, 48), 0b000);
    if is_some(badlength?) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"));
    write_sptr(proc_mode, new_rsp);
    let flg3 : option(string) = x86_operand_to_reg_mem(proc_mode, operand_size, check_alignment?, false, unsigned(sailval), seg_reg, addr, rex_byte, r_m, mod_var);
    if is_some(flg3) then throw(Emsg("Model state error: :X86-OPERAND-TO-REG/MEM"));
    write_iptr(proc_mode, truncate(temp_rip, 48))
}

val x86_pushf : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_pushf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-PUSHF";
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let eflags : bits(32) = rflags;
    let eflags : bits(32) = {
        match operand_size {
          2 => logand(0x0000ffff, eflags),
          _ => logand(0x003cffff, eflags)
        }
    };
    let flg : option(string) = wme_size(proc_mode, operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(eflags), alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    write_sptr(proc_mode, new_rsp);
    write_iptr(proc_mode, temp_rip)
}

val x86_popf : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_popf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-POPF";
    let operand_size : {|1, 2, 4, 8|} = select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false);
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let (flg, new_rsp) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg0, sailval) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(), struct { mem_ptr? = false });
    if is_some(flg0) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    let sailval : bits(32) = logior(0x00000002, truncate(logand(0x000000000000000000000000003f7fd7, sailval), 32));
    write_sptr(proc_mode, new_rsp);
    (match operand_size {
      2 => rflags = sailval,
      _ => {
          let rf : bits(1) = truncate(let rflags_var : bits(32) = rflags in
            sail_zero_extend(rflagsbits_get_rf(rflags_var), 2), 1);
          let vm : bits(1) = truncate(let rflags_var : bits(32) = rflags in
            sail_zero_extend(rflagsbits_get_vm(rflags_var), 2), 1);
          rflags = sailval;
          let rflags_var : bits(32) = rflags in
          let new_rflags : bits(32) = set_rflagsbits_get_rf(rf, rflags_var) in rflags = new_rflags;
          let rflags_var : bits(32) = rflags in
          let new_rflags : bits(32) = set_rflagsbits_get_vm(vm, rflags_var) in rflags = new_rflags;
          let rflags_var : bits(32) = rflags in
          let new_rflags : bits(32) = set_rflagsbits_get_vip(0b0, rflags_var) in rflags = new_rflags;
          let rflags_var : bits(32) = rflags;
          let new_rflags : bits(32) = set_rflagsbits_get_vif(0b0, rflags_var);
          rflags = new_rflags
      }
    }) : unit;
    write_iptr(proc_mode, temp_rip)
}

val x86_pusha : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_pusha (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-PUSHA";
    let operand_size : {|2, 4|} = check_range(2, 4, select_operand_size(proc_mode, false, 0x00, false, prefixes, false, false, false));
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let eax_ax : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x0, 0x00);
    let ecx_cx : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x1, 0x00);
    let edx_dx : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x2, 0x00);
    let ebx_bx : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x3, 0x00);
    let esp_sp : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x4, 0x00);
    let ebp_bp : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x5, 0x00);
    let esi_si : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x6, 0x00);
    let edi_di : bits(64) = rgfi_size(bits_of_int(operand_size, 4), 0x7, 0x00);
    let check_alignment? : bool = alignment_checking_enabled_p();
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(eax_ax), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    let check_alignment? : bool = false;
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(ecx_cx), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(edx_dx), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(ebx_bx), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(esp_sp), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(ebp_bp), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(esi_si), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    let flg : option(string) = wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(edi_di), check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"));
    write_sptr(proc_mode, rsp_var);
    write_iptr(proc_mode, temp_rip)
}

val x86_popa : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit

function x86_popa (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) = {
    let ctx : string = "X86-POPA";
    let operand_size : {|2, 4|} = check_range(2, 4, select_operand_size(proc_mode, false, 0x00, false, prefixes, false, false, false));
    let rsp_var : sbits(64) = read_sptr(proc_mode);
    let check_alignment? : bool = alignment_checking_enabled_p();
    let (flg, edi_di) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let check_alignment? : bool = false;
    let (flg, esi_si) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, ebp_bp) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, ebx_bx) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, edx_dx) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, ecx_cx) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, eax_ax) : (option(string), bits(128)) = rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct { mem_ptr? = false });
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    let (flg, rsp_var) : (option(string), sbits(64)) = add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64));
    if is_some(flg) then throw(Emsg("A fault occurred.  Original ACL2 AST:\n['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"));
    write_rgfi_size(bits_of_int(operand_size, 4), 0x7, unsigned(edi_di), 0x00);
    write_rgfi_size(bits_of_int(operand_size, 4), 0x6, unsigned(esi_si), 0x00);
    write_rgfi_size(bits_of_int(operand_size, 4), 0x5, unsigned(ebp_bp), 0x00);
    write_rgfi_size(bits_of_int(operand_size, 4), 0x3, unsigned(ebx_bx), 0x00);
    write_rgfi_size(bits_of_int(operand_size, 4), 0x2, unsigned(edx_dx), 0x00);
    write_rgfi_size(bits_of_int(operand_size, 4), 0x1, unsigned(ecx_cx), 0x00);
    write_rgfi_size(bits_of_int(operand_size, 4), 0x0, unsigned(eax_ax), 0x00);
    write_sptr(proc_mode, rsp_var);
    write_iptr(proc_mode, temp_rip)
}
