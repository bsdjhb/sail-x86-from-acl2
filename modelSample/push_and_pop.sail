$include <prelude.sail>
$include <string.sail>

/*PUSH: 50+rw/rd*/
/*<p>Op/En: O</p> 
 <p><tt>50+rw/rd r16/r32/r64</tt></p> 
 <p>Note that <tt>50+rd r32</tt> is N.E. in 64-bit mode 
 and that <tt>50+rd r64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>PUSH does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_push_general_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_push_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-PUSH-GENERAL-REGISTER") in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let reg : int = (loghead(3, unsigned(opcode))) in
let sailval : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), reg_index(bits_of_int(reg, 3), rex_byte, 0b00), rex_byte)) in
let badlength? : option(int) = (check_instruction_length(start_rip, temp_rip, 0b000)) in
{ if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(sailval), alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
write_sptr(proc_mode, new_rsp);
write_iptr(proc_mode, temp_rip)
}
}
}

/*PUSH: FF /6 r/m*/
/*<p>Op/En: M</p> 
 <p><tt>FF /6 r/m16/32/64</tt></p> 
 <p>Note that <tt>FF/6 r/m32</tt> is N.E. in 64-bit mode 
 and that <tt>FF/6 r/m64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>PUSH does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p> 
 
 <p>This opcode belongs to Group 5, and it has an opcode 
 extension ( ModR/m.reg = 6 ) .</p>*/
val x86_push_ev : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_push_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-PUSH-EV") in
let r_m : bits(3) = (modr_m_get_r_m(modr_m)) in
let mod_var : bits(2) = (modr_m_get_mod(modr_m)) in
let reg : bits(3) = (modr_m_get_reg(modr_m)) in
let p2 : bits(8) = (prefixes_get_seg(prefixes)) in
let p4? : bool = ((0x67) == (prefixes_get_adr(prefixes))) in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let seg_reg : {|0, 1, 2, 3, 4, 5|} = (select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib)) in
let (flg0, e, increment_rip_by, e_addr) : (option(string), int, {|0, 1, 2, 4|}, sbits(64)) = (x86_operand_from_modr_m_and_sib_bytes(proc_mode, 0b0, operand_size, true, false, seg_reg, p4?, temp_rip, rex_byte, r_m, mod_var, sib, 0b000)) in
let increment_rip_by : bits(3) = (bits_of_int(increment_rip_by, 3)) in
{ if is_some(flg0)
then throw(Emsg("Model state error: :X86-OPERAND-FROM-MODR/M-AND-SIB-BYTES"))
else ();
let (flg, temp_rip) : (option(string), sbits(49)) = (add_to_iptr(proc_mode, temp_rip, sail_zero_extend(increment_rip_by, 48))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"))
else ();
let badlength? : option(int) = (check_instruction_length(start_rip, truncate(temp_rip, 48), 0b000)) in
{ if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, nat_of_int(e), alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
write_sptr(proc_mode, new_rsp);
write_iptr(proc_mode, truncate(temp_rip, 48))
}
}
}
}
}

/*PUSH: 6A/68 ib/iw/id*/
/*<p>Op/En: I</p> 
 <p><tt>6A ib</tt>: PUSH imm8</p> 
 <p><tt>68 iw</tt>: PUSH imm16</p> 
 <p><tt>68 id</tt>: PUSH imm32</p> 
 
 <p>From the description of the PUSH instruction ( Intel Manual, Vol. 2, 
 Section 4.2 ) :</p> 
 
 <p><i> If the source operand is an immediate of size less than the operand 
 size, a sign-extended value is pushed on the stack.</i></p> 
 
 <p>PUSH doesn ' t have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled the decoding with the 
 execution in this case.</p>*/
val x86_push_i : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_push_i (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-PUSH-I") in
let byte_imm? : bool = ((opcode) == (0x6a)) in
let imm_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, byte_imm?, rex_byte, true, prefixes, false, false, false)) in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg0, imm) : (option(string), sbits(64)) = (rime_size(proc_mode, imm_size, sail_sign_extend(temp_rip, 64), 1, ":X", false, struct {mem_ptr? = false})) in
let imm : sbits(32) = (truncate(imm, 32)) in
{ if is_some(flg0)
then throw(Emsg("Model state error: :IMM-RIME-SIZE-ERROR"))
else ();
let (flg, temp_rip) : (option(string), sbits(49)) = (add_to_iptr(proc_mode, temp_rip, bits_of_int(imm_size, 48))) in
let temp_rip : sbits(48) = (truncate(temp_rip, 48)) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':TEMP-RIP-NOT-CANONICAL', 'TEMP-RIP']"))
else ();
let badlength? : option(int) = (check_instruction_length(start_rip, temp_rip, 0b000)) in
{ if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else ();
let flg1 : option(string) = (wme_size(proc_mode, operand_size, new_rsp, 2, nat_of_int(loghead(ash(operand_size, 3), signed(imm))), alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg1)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
write_sptr(proc_mode, new_rsp);
write_iptr(proc_mode, temp_rip)
}
}
}
}
}

/*PUSH Segment Register*/
/*<p>Note that PUSH CS/SS/DS/ES are invalid in 64-bit mode. Only PUSH FS/GS 
 are valid in 64-bit mode.</p> 
 
 <p><tt>0E</tt>: [PUSH CS]</p> 
 <p><tt>16</tt>: [PUSH SS]</p> 
 <p><tt>1E</tt>: [PUSH DS]</p> 
 <p><tt>06</tt>: [PUSH ES]</p> 
 <p><tt>0F A0</tt>: [PUSH FS]</p> 
 <p><tt>0F A8</tt>: [PUSH GS]</p> 
 
 <p>If the source operand is a segment register ( 16 bits ) and the operand 
 size is 64-bits, a zero-extended value is pushed on the stack; if the 
 operand size is 32-bits, either a zero-extended value is pushed on the stack 
 or the segment selector is written on the stack using a 16-bit move. For the 
 last case, all recent Core and Atom processors perform a 16-bit move, 
 leaving the upper portion of the stack location unmodified.</p> 
 
 <p>For now, our model handles the last case described above by doing a 
 16-bit move. This should be how all modern processor work. In the future, we 
 might parameterize the model on a flag that says how this case is handled 
 ( modern or legacy ) .</p> 
 
 <p>PUSH doesn ' t have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_push_segment_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_push_segment_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-PUSH-SEGMENT-REGISTER") in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let sailval : bits(16) = (seg_visibles[(match opcode {
14 => 1,
22 => 2,
30 => 3,
6 => 0,
160 => 4,
_ => 5
}) : {|0, 1, 2, 3, 4, 5|}]) in
let flg : option(string) = (wme_size(proc_mode, if (operand_size) == (4)
then 2
else operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(sailval), alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
write_sptr(proc_mode, new_rsp);
write_iptr(proc_mode, temp_rip)
}
}

/*POP: 58+rw/rd*/
/*<p>Op/En: O</p> 
 <p><tt>58+rw/rd r16/r32/r64</tt></p> 
 <p>Note that <tt>58+rd r32</tt> is N.E. in the 64-bit mode 
 and that <tt>58+rd r64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>POP does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_pop_general_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {escape, rmem, rreg, wreg}
function x86_pop_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-POP-GENERAL-REGISTER") in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg0, sailval) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
let reg : bits(8) = (logand(opcode, 0x07)) in
let badlength? : option(int) = (check_instruction_length(start_rip, temp_rip, 0b000)) in
{ if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else ();
write_sptr(proc_mode, new_rsp);
write_rgfi_size(bits_of_int(operand_size, 4), reg_index(truncate(reg, 3), rex_byte, 0b00), sailval, rex_byte);
write_iptr(proc_mode, temp_rip)
}
}
}

/*POP: 8F/0 r/m*/
/*<p>Op/En: M</p> 
 <p><tt>8F/0 r/m16/32/64</tt></p> 
 <p>Note that <tt>8F/0 r/m32</tt> is N.E. in 64-bit mode 
 and that <tt>8F/0 r/m64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>POP does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p> 
 
 <p>This opcode belongs to Group 1A, and it has an opcode 
 extension ( ModR/m.reg = 0 ) .</p>*/
val x86_pop_ev : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_pop_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-POP-EV") in
let r_m : bits(3) = (modr_m_get_r_m(modr_m)) in
let mod_var : bits(2) = (modr_m_get_mod(modr_m)) in
let reg : bits(3) = (modr_m_get_reg(modr_m)) in
let p2 : bits(8) = (prefixes_get_seg(prefixes)) in
let p4? : bool = ((0x67) == (prefixes_get_adr(prefixes))) in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let check_alignment? : bool = (alignment_checking_enabled_p()) in
let (flg0, sailval) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
let (flg1, addr, increment_rip_by) : (option(string), sbits(64), {|0, 1, 2, 4|}) = (if (mod_var) == (0b11)
then (None() : option(string), 0x0000_0000_0000_0000, 0)
else x86_effective_addr(proc_mode, p4?, temp_rip, rex_byte, r_m, mod_var, sib, 0b000)) in
let increment_rip_by : bits(3) = (bits_of_int(increment_rip_by, 3)) in
{ if is_some(flg1)
then throw(Emsg("Model state error: :X86-EFFECTIVE-ADDR-ERROR"))
else ();
let seg_reg : {|0, 1, 2, 3, 4, 5|} = (select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib)) in
let (flg, temp_rip) : (option(string), sbits(49)) = (add_to_iptr(proc_mode, temp_rip, sail_zero_extend(increment_rip_by, 48))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"))
else ();
let badlength? : option(int) = (check_instruction_length(start_rip, truncate(temp_rip, 48), 0b000)) in
{ if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else ();
write_sptr(proc_mode, new_rsp);
let flg3 : option(string) = (x86_operand_to_reg_mem(proc_mode, operand_size, check_alignment?, false, nat_of_int(sailval), seg_reg, addr, rex_byte, r_m, mod_var)) in
{ if is_some(flg3)
then throw(Emsg("Model state error: :X86-OPERAND-TO-REG/MEM"))
else ();
write_iptr(proc_mode, truncate(temp_rip, 48))
}
}
}
}
}
}

val x86_pushf : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_pushf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-PUSHF") in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let eflags : bits(32) = (rflags) in
let eflags : bits(32) = (match operand_size {
2 => logand(0x0000_ffff, eflags),
_ => logand(0x003c_ffff, eflags)
}) in
let flg : option(string) = (wme_size(proc_mode, operand_size, sail_sign_extend(truncate(new_rsp, 48), 64), 2, unsigned(eflags), alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
write_sptr(proc_mode, new_rsp);
write_iptr(proc_mode, temp_rip)
}
}

val x86_popf : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {escape, rmem, rreg, wreg}
function x86_popf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-POPF") in
let operand_size : {|1, 2, 4, 8|} = (select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false)) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let (flg, new_rsp) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg0, sailval) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(), struct {mem_ptr? = false})) in
{ if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
let sailval : bits(32) = (logior(0x0000_0002, bits_of_int(logand(4161495, sailval), 32))) in
{ write_sptr(proc_mode, new_rsp);
(match operand_size {
2 => rflags = sailval,
_ => let rf : bits(1) = (truncate(let rflags_var : bits(32) = (rflags) in
sail_zero_extend(rflagsbits_get_rf(rflags_var), 2), 1)) in
let vm : bits(1) = (truncate(let rflags_var : bits(32) = (rflags) in
sail_zero_extend(rflagsbits_get_vm(rflags_var), 2), 1)) in
{ rflags = sailval;
let rflags_var : bits(32) = (rflags) in
let new_rflags : bits(32) = (set_rflagsbits_get_rf(rf, rflags_var)) in
rflags = new_rflags;
let rflags_var : bits(32) = (rflags) in
let new_rflags : bits(32) = (set_rflagsbits_get_vm(vm, rflags_var)) in
rflags = new_rflags;
let rflags_var : bits(32) = (rflags) in
let new_rflags : bits(32) = (set_rflagsbits_get_vip(0b0, rflags_var)) in
rflags = new_rflags;
let rflags_var : bits(32) = (rflags) in
let new_rflags : bits(32) = (set_rflagsbits_get_vif(0b0, rflags_var)) in
rflags = new_rflags
}
}) : unit;
write_iptr(proc_mode, temp_rip)
}
}
}

/*PUSHA/PUSHAD: 60*/
/*<p> 
 In 64-bit mode, this instruction is invalid; it throws a #UD exception. 
 </p> 
 <p> 
 Note that the stack pointer is read twice: 
 via @ ( tsee read-*sp ) and via @ ( tsee rgfi-size ) . 
 The former is used as the address to write into the stack, 
 while the latter is used as ( part of ) the data to write into the stack. 
 In principle, the sizes of these two stack pointers may differ: 
 the former ' s size is determined solely by CS.D, 
 while the latter ' s size is also influenced 
 by the operand size override prefix. 
 It seems odd that the two sizes would differ, though. 
 </p> 
 <p> 
 We use some simple and repetitive code to write the registers into the stack. 
 It may be possible to optimize it by pushing all the registers in one shot. 
 </p>*/
val x86_pusha : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_pusha (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-PUSHA") in
let operand_size : {|2, 4|} = (check_range(2, 4, select_operand_size(proc_mode, false, 0x00, false, prefixes, false, false, false))) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let eax_ax : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x0, 0x00)) in
let ecx_cx : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x1, 0x00)) in
let edx_dx : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x2, 0x00)) in
let ebx_bx : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x3, 0x00)) in
let esp_sp : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x4, 0x00)) in
let ebp_bp : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x5, 0x00)) in
let esi_si : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x6, 0x00)) in
let edi_di : bits(64) = (rgfi_size(bits_of_int(operand_size, 4), 0x7, 0x00)) in
let check_alignment? : bool = (alignment_checking_enabled_p()) in
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(eax_ax), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
let check_alignment? : bool = (false) in
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(ecx_cx), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(edx_dx), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(ebx_bx), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(esp_sp), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(ebp_bp), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(esi_si), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(negate(operand_size), 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
let flg : option(string) = (wme_size(proc_mode, operand_size, rsp_var, 2, unsigned(edi_di), check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else ();
write_sptr(proc_mode, rsp_var);
write_iptr(proc_mode, temp_rip)
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

/*POPA/POPD: 61*/
/*<p> 
 In 64-bit mode, this instruction is invalid; it throws a #UD exception. 
 </p> 
 <p> 
 We use some simple and repetitive code to read the registers from the stack. 
 It may be possible to optimize it by popping all the registers in one shot. 
 </p>*/
val x86_popa : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {escape, rmem, rreg, wreg}
function x86_popa (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx : string = ("X86-POPA") in
let operand_size : {|2, 4|} = (check_range(2, 4, select_operand_size(proc_mode, false, 0x00, false, prefixes, false, false, false))) in
let rsp_var : sbits(64) = (read_sptr(proc_mode)) in
let check_alignment? : bool = (alignment_checking_enabled_p()) in
let (flg, edi_di) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let check_alignment? : bool = (false) in
let (flg, esi_si) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, ebp_bp) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, ebx_bx) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, edx_dx) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, ecx_cx) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, eax_ax) : (option(string), int) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
let (flg, rsp_var) : (option(string), sbits(64)) = (add_to_sptr(proc_mode, rsp_var, bits_of_int(operand_size, 64))) in
{ if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else ();
write_rgfi_size(bits_of_int(operand_size, 4), 0x7, edi_di, 0x00);
write_rgfi_size(bits_of_int(operand_size, 4), 0x6, esi_si, 0x00);
write_rgfi_size(bits_of_int(operand_size, 4), 0x5, ebp_bp, 0x00);
write_rgfi_size(bits_of_int(operand_size, 4), 0x3, ebx_bx, 0x00);
write_rgfi_size(bits_of_int(operand_size, 4), 0x2, edx_dx, 0x00);
write_rgfi_size(bits_of_int(operand_size, 4), 0x1, ecx_cx, 0x00);
write_rgfi_size(bits_of_int(operand_size, 4), 0x0, eax_ax, 0x00);
write_sptr(proc_mode, rsp_var);
write_iptr(proc_mode, temp_rip)
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

