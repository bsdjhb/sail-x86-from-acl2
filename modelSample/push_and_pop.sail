$include <prelude.sail>
$include <string.sail>

/*PUSH: 50+rw/rd*/
/*<p>Op/En: O</p> 
 <p><tt>50+rw/rd r16/r32/r64</tt></p> 
 <p>Note that <tt>50+rd r32</tt> is N.E. in 64-bit mode 
 and that <tt>50+rd r64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>PUSH does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_push_general_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_push_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-PUSH-GENERAL-REGISTER") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let reg = (loghead(3, unsigned(opcode))) : int in
let sailval = (rgfi_size(get_slice_int(4, operand_size, 0), reg_index(get_slice_int(3, reg, 0), rex_byte, get_slice_int(2, 0, 0)), rex_byte)) : bits(64) in
let badlength? = (check_instruction_length(start_rip, temp_rip, get_slice_int(3, 0, 0))) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, the_sbits(48, new_rsp)), 2, unsigned(sailval), alignment_checking_enabled_p(), struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
write_iptr(proc_mode, temp_rip)
}

/*PUSH: FF /6 r/m*/
/*<p>Op/En: M</p> 
 <p><tt>FF /6 r/m16/32/64</tt></p> 
 <p>Note that <tt>FF/6 r/m32</tt> is N.E. in 64-bit mode 
 and that <tt>FF/6 r/m64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>PUSH does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p> 
 
 <p>This opcode belongs to Group 5, and it has an opcode 
 extension ( ModR/m.reg = 6 ) .</p>*/
val x86_push_ev : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_push_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-PUSH-EV") : string in
let r_m = (modr_m_get_r_m(modr_m)) : bits(3) in
let mod_var = (modr_m_get_mod(modr_m)) : bits(2) in
let reg = (modr_m_get_reg(modr_m)) : bits(3) in
let p2 = (prefixes_get_seg(prefixes)) : bits(8) in
let p4? = ((get_slice_int(8, 103, 0)) == (prefixes_get_adr(prefixes))) : bool in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let seg_reg = (select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib)) : {|0, 1, 2, 3, 4, 5|} in
let (flg0, e, increment_rip_by, e_addr) = (x86_operand_from_modr_m_and_sib_bytes(proc_mode, get_slice_int(1, 0, 0), operand_size, true, false, seg_reg, p4?, temp_rip, rex_byte, r_m, mod_var, sib, get_slice_int(3, 0, 0))) : (option(string), int, {|0, 1, 2, 4|}, sbits(66)) in
let increment_rip_by = (the_bits(3, increment_rip_by)) : bits(3) in
if is_some(flg0)
then throw(Emsg("Model state error: :X86-OPERAND-FROM-MODR/M-AND-SIB-BYTES"))
else let (flg, temp_rip) = (add_to_iptr(proc_mode, temp_rip, the_bits(48, increment_rip_by))) : (option(string), sbits(52)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"))
else let badlength? = (check_instruction_length(start_rip, the_sbits(48, temp_rip), get_slice_int(3, 0, 0))) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, the_sbits(48, new_rsp)), 2, the_nat(e), alignment_checking_enabled_p(), struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
write_iptr(proc_mode, the_sbits(48, temp_rip))
}

/*PUSH: 6A/68 ib/iw/id*/
/*<p>Op/En: I</p> 
 <p><tt>6A ib</tt>: PUSH imm8</p> 
 <p><tt>68 iw</tt>: PUSH imm16</p> 
 <p><tt>68 id</tt>: PUSH imm32</p> 
 
 <p>From the description of the PUSH instruction ( Intel Manual, Vol. 2, 
 Section 4.2 ) :</p> 
 
 <p><i> If the source operand is an immediate of size less than the operand 
 size, a sign-extended value is pushed on the stack.</i></p> 
 
 <p>PUSH doesn ' t have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled the decoding with the 
 execution in this case.</p>*/
val x86_push_i : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_push_i (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-PUSH-I") : string in
let byte_imm? = ((opcode) == (get_slice_int(8, 106, 0))) : bool in
let imm_size = (the_range(1, 8, select_operand_size(proc_mode, byte_imm?, rex_byte, true, prefixes, false, false, false))) : {|8, 1, 2, 4|} in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg0, imm) = (rime_size(proc_mode, imm_size, the_sbits(64, temp_rip), 1, ":X", false, struct {mem_ptr? = false})) : (option(string), sbits(68)) in
let imm = (the_sbits(32, imm)) : sbits(32) in
if is_some(flg0)
then throw(Emsg("Model state error: :IMM-RIME-SIZE-ERROR"))
else let (flg, temp_rip) = (add_to_iptr(proc_mode, temp_rip, get_slice_int(48, imm_size, 0))) : (option(string), sbits(52)) in
let temp_rip = (the_sbits(48, temp_rip)) : sbits(48) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':TEMP-RIP-NOT-CANONICAL', 'TEMP-RIP']"))
else let badlength? = (check_instruction_length(start_rip, temp_rip, get_slice_int(3, 0, 0))) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else let flg1 = (wme_size(proc_mode, operand_size, the_sbits(64, new_rsp), 2, the_nat(loghead(ash(operand_size, 3), signed(imm))), alignment_checking_enabled_p(), struct {mem_ptr? = false})) : option(string) in
if is_some(flg1)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
write_iptr(proc_mode, temp_rip)
}

/*PUSH Segment Register*/
/*<p>Note that PUSH CS/SS/DS/ES are invalid in 64-bit mode. Only PUSH FS/GS 
 are valid in 64-bit mode.</p> 
 
 <p><tt>0E</tt>: [PUSH CS]</p> 
 <p><tt>16</tt>: [PUSH SS]</p> 
 <p><tt>1E</tt>: [PUSH DS]</p> 
 <p><tt>06</tt>: [PUSH ES]</p> 
 <p><tt>0F A0</tt>: [PUSH FS]</p> 
 <p><tt>0F A8</tt>: [PUSH GS]</p> 
 
 <p>If the source operand is a segment register ( 16 bits ) and the operand 
 size is 64-bits, a zero-extended value is pushed on the stack; if the 
 operand size is 32-bits, either a zero-extended value is pushed on the stack 
 or the segment selector is written on the stack using a 16-bit move. For the 
 last case, all recent Core and Atom processors perform a 16-bit move, 
 leaving the upper portion of the stack location unmodified.</p> 
 
 <p>For now, our model handles the last case described above by doing a 
 16-bit move. This should be how all modern processor work. In the future, we 
 might parameterize the model on a flag that says how this case is handled 
 ( modern or legacy ) .</p> 
 
 <p>PUSH doesn ' t have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_push_segment_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_push_segment_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-PUSH-SEGMENT-REGISTER") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let sailval = (seg_visibles[(match opcode {
14 => 1,
22 => 2,
30 => 3,
6 => 0,
160 => 4,
_ => 5
}) : {|0, 1, 2, 3, 4, 5|}]) : bits(16) in
let flg = (wme_size(proc_mode, if (the_range(0, 5, operand_size)) == (4)
then 2
else operand_size, the_sbits(64, the_sbits(48, new_rsp)), 2, unsigned(sailval), alignment_checking_enabled_p(), struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
write_iptr(proc_mode, temp_rip)
}

/*POP: 58+rw/rd*/
/*<p>Op/En: O</p> 
 <p><tt>58+rw/rd r16/r32/r64</tt></p> 
 <p>Note that <tt>58+rd r32</tt> is N.E. in the 64-bit mode 
 and that <tt>58+rd r64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>POP does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p>*/
val x86_pop_general_register : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {escape, rmem, rreg, wreg}
function x86_pop_general_register (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-POP-GENERAL-REGISTER") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg0, sailval) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(), struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let reg = (logand(opcode, get_slice_int(8, 7, 0))) : bits(8) in
let badlength? = (check_instruction_length(start_rip, temp_rip, get_slice_int(3, 0, 0))) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
write_rgfi_size(get_slice_int(4, operand_size, 0), reg_index(the_bits(3, reg), rex_byte, get_slice_int(2, 0, 0)), sailval, rex_byte);
write_iptr(proc_mode, temp_rip)
}

/*POP: 8F/0 r/m*/
/*<p>Op/En: M</p> 
 <p><tt>8F/0 r/m16/32/64</tt></p> 
 <p>Note that <tt>8F/0 r/m32</tt> is N.E. in 64-bit mode 
 and that <tt>8F/0 r/m64</tt> is N.E. in 32-bit mode.</p> 
 
 <p>POP does not have a separate instruction semantic function, unlike other 
 opcodes like ADD, SUB, etc. The decoding is coupled with the execution in 
 this case.</p> 
 
 <p>This opcode belongs to Group 1A, and it has an opcode 
 extension ( ModR/m.reg = 0 ) .</p>*/
val x86_pop_ev : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rmem, rreg, wmv, wreg}
function x86_pop_ev (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-POP-EV") : string in
let r_m = (modr_m_get_r_m(modr_m)) : bits(3) in
let mod_var = (modr_m_get_mod(modr_m)) : bits(2) in
let reg = (modr_m_get_reg(modr_m)) : bits(3) in
let p2 = (prefixes_get_seg(prefixes)) : bits(8) in
let p4? = ((get_slice_int(8, 103, 0)) == (prefixes_get_adr(prefixes))) : bool in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let check_alignment? = (alignment_checking_enabled_p()) : bool in
let (flg0, sailval) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let (flg1, addr, increment_rip_by) = (if (the_bits(8, mod_var)) == (get_slice_int(8, 3, 0))
then (None() : option(string), get_slice_int(68, 0, 0), 0 : {|0|})
else let (elem0, elem1, elem2) = (x86_effective_addr(proc_mode, p4?, temp_rip, rex_byte, r_m, mod_var, sib, get_slice_int(3, 0, 0))) : (option(string), sbits(67), {|0, 1, 2, 4|}) in
(elem0, the_sbits(68, elem1), elem2)) : (option(string), sbits(68), {|0, 1, 2, 4|}) in
let addr = (the_sbits(64, addr)) : sbits(64) in
let increment_rip_by = (the_bits(3, increment_rip_by)) : bits(3) in
if is_some(flg1)
then throw(Emsg("Model state error: :X86-EFFECTIVE-ADDR-ERROR"))
else let seg_reg = (select_segment_register(proc_mode, p2, p4?, mod_var, r_m, sib)) : {|0, 1, 2, 3, 4, 5|} in
let (flg, temp_rip) = (add_to_iptr(proc_mode, temp_rip, the_bits(48, increment_rip_by))) : (option(string), sbits(52)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INCREMENT-IP-ERROR', 'FLG']"))
else let badlength? = (check_instruction_length(start_rip, the_sbits(48, temp_rip), get_slice_int(3, 0, 0))) : option(int) in
if is_some(badlength?)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':GP', '0', ':INSTRUCTION-LENGTH', 'BADLENGTH?']"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
let flg3 = (x86_operand_to_reg_mem(proc_mode, operand_size, check_alignment?, false, the_nat(sailval), seg_reg, addr, rex_byte, r_m, mod_var)) : option(string) in
if is_some(flg3)
then throw(Emsg("Model state error: :X86-OPERAND-TO-REG/MEM"))
else write_iptr(proc_mode, the_sbits(48, temp_rip))
}

val x86_pushf : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_pushf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-PUSHF") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let eflags = (rflags) : bits(32) in
let eflags = ((match operand_size {
2 => logand(get_slice_int(32, 65535, 0), eflags),
_ => logand(get_slice_int(32, 3997695, 0), eflags)
}) : bits(32)) : bits(32) in
let flg = (wme_size(proc_mode, operand_size, the_sbits(64, the_sbits(48, new_rsp)), 2, unsigned(eflags), alignment_checking_enabled_p(), struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else { write_sptr(proc_mode, the_sbits(64, new_rsp));
write_iptr(proc_mode, temp_rip)
}

val x86_popf : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {escape, rmem, rreg, wreg}
function x86_popf (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-POPF") : string in
let operand_size = (the_range(1, 8, select_operand_size(proc_mode, false, rex_byte, false, prefixes, true, true, false))) : {|8, 1, 2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let (flg, new_rsp) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg0, sailval) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", alignment_checking_enabled_p(), struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg0)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let sailval = (logior(get_slice_int(32, 2, 0), the_bits(32, logand(4161495, sailval)))) : bits(32) in
{ write_sptr(proc_mode, the_sbits(64, new_rsp));
(match operand_size {
2 => rflags = sailval,
_ => let rf = (the_bits(1, let rflags_var = (rflags) : bits(32) in
the_bits(2, rflagsbits_get_rf(rflags_var)))) : bits(1) in
let vm = (the_bits(1, let rflags_var = (rflags) : bits(32) in
the_bits(2, rflagsbits_get_vm(rflags_var)))) : bits(1) in
{ rflags = sailval;
let rflags_var = (rflags) : bits(32) in
let new_rflags = (set_rflagsbits_get_rf(rf, rflags_var)) : bits(32) in
rflags = new_rflags;
let rflags_var = (rflags) : bits(32) in
let new_rflags = (set_rflagsbits_get_vm(vm, rflags_var)) : bits(32) in
rflags = new_rflags;
let rflags_var = (rflags) : bits(32) in
let new_rflags = (set_rflagsbits_get_vip(get_slice_int(1, 0, 0), rflags_var)) : bits(32) in
rflags = new_rflags;
let rflags_var = (rflags) : bits(32) in
let new_rflags = (set_rflagsbits_get_vif(get_slice_int(1, 0, 0), rflags_var)) : bits(32) in
rflags = new_rflags
}
}) : unit;
write_iptr(proc_mode, temp_rip)
}

/*PUSHA/PUSHAD: 60*/
/*<p> 
 In 64-bit mode, this instruction is invalid; it throws a #UD exception. 
 </p> 
 <p> 
 Note that the stack pointer is read twice: 
 via @ ( tsee read-*sp ) and via @ ( tsee rgfi-size ) . 
 The former is used as the address to write into the stack, 
 while the latter is used as ( part of ) the data to write into the stack. 
 In principle, the sizes of these two stack pointers may differ: 
 the former ' s size is determined solely by CS.D, 
 while the latter ' s size is also influenced 
 by the operand size override prefix. 
 It seems odd that the two sizes would differ, though. 
 </p> 
 <p> 
 We use some simple and repetitive code to write the registers into the stack. 
 It may be possible to optimize it by pushing all the registers in one shot. 
 </p>*/
val x86_pusha : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {eamem, escape, rreg, wmv, wreg}
function x86_pusha (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-PUSHA") : string in
let operand_size = (the_range(2, 4, select_operand_size(proc_mode, false, get_slice_int(8, 0, 0), false, prefixes, false, false, false))) : {|2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let eax_ax = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 0, 0), get_slice_int(8, 0, 0))) : bits(64) in
let ecx_cx = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 1, 0), get_slice_int(8, 0, 0))) : bits(64) in
let edx_dx = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 2, 0), get_slice_int(8, 0, 0))) : bits(64) in
let ebx_bx = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 3, 0), get_slice_int(8, 0, 0))) : bits(64) in
let esp_sp = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 4, 0), get_slice_int(8, 0, 0))) : bits(64) in
let ebp_bp = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 5, 0), get_slice_int(8, 0, 0))) : bits(64) in
let esi_si = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 6, 0), get_slice_int(8, 0, 0))) : bits(64) in
let edi_di = (rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 7, 0), get_slice_int(8, 0, 0))) : bits(64) in
let check_alignment? = (alignment_checking_enabled_p()) : bool in
let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(eax_ax), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let check_alignment? = (false) : bool in
let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(ecx_cx), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(edx_dx), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(ebx_bx), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(esp_sp), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(ebp_bp), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(esi_si), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, negate(operand_size), 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else let flg = (wme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, unsigned(edi_di), check_alignment?, struct {mem_ptr? = false})) : option(string) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':PUSH', 'FLG']"))
else { write_sptr(proc_mode, the_sbits(64, rsp_var));
write_iptr(proc_mode, temp_rip)
}

/*POPA/POPD: 61*/
/*<p> 
 In 64-bit mode, this instruction is invalid; it throws a #UD exception. 
 </p> 
 <p> 
 We use some simple and repetitive code to read the registers from the stack. 
 It may be possible to optimize it by popping all the registers in one shot. 
 </p>*/
val x86_popa : (range(0, 4), sbits(48), sbits(48), bits(52), bits(8), bits(8), bits(8), bits(8)) -> unit effect {escape, rmem, rreg, wreg}
function x86_popa (proc_mode, start_rip, temp_rip, prefixes, rex_byte, opcode, modr_m, sib) =
let ctx = ("X86-POPA") : string in
let operand_size = (the_range(2, 4, select_operand_size(proc_mode, false, get_slice_int(8, 0, 0), false, prefixes, false, false, false))) : {|2, 4|} in
let rsp_var = (read_sptr(proc_mode)) : bits(64) in
let check_alignment? = (alignment_checking_enabled_p()) : bool in
let (flg, edi_di) = (rme_size(proc_mode, operand_size, rsp_var, 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("This error is generated by the translator and represents a more detailed error that occurred in `push-and-pop.lisp`"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, rsp_var, get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let check_alignment? = (false) : bool in
let (flg, esi_si) = (rme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, ebp_bp) = (rme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, ebx_bx) = (rme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, edx_dx) = (rme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, ecx_cx) = (rme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, eax_ax) = (rme_size(proc_mode, operand_size, the_sbits(64, rsp_var), 2, ":R", check_alignment?, struct {mem_ptr? = false})) : (option(string), int) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else let (flg, rsp_var) = (add_to_sptr(proc_mode, the_sbits(64, rsp_var), get_slice_int(64, operand_size, 0))) : (option(string), sbits(67)) in
if is_some(flg)
then throw(Emsg("A fault occurred.  Original ACL2 AST:
['!!FAULT-FRESH', ':SS', '0', ':POP', 'FLG']"))
else { write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 7, 0), edi_di, get_slice_int(8, 0, 0));
write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 6, 0), esi_si, get_slice_int(8, 0, 0));
write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 5, 0), ebp_bp, get_slice_int(8, 0, 0));
write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 3, 0), ebx_bx, get_slice_int(8, 0, 0));
write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 2, 0), edx_dx, get_slice_int(8, 0, 0));
write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 1, 0), ecx_cx, get_slice_int(8, 0, 0));
write_rgfi_size(get_slice_int(4, operand_size, 0), get_slice_int(4, 0, 0), eax_ax, get_slice_int(8, 0, 0));
write_sptr(proc_mode, the_sbits(64, rsp_var));
write_iptr(proc_mode, temp_rip)
}

