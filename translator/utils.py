"""
Misc. utility functions.  The most important is sanitiseSymbol() which
changes Lisp names into valid Sail names.
"""

def convertLiteral(s):
	"""
	Tries to convert a string to numeric literal.

	Args:
		s: str

	Returns:
		int | float | None
	"""
	try:
		int(s)
		return int(s)
	except ValueError:
		try:
			float(s)
			return float(s)
		except:
			return None
	except TypeError:
		return None

def sanitiseSymbol(symbol, lower=True, includeFnNames=False, avoidShadowed=True, infix=False):
	"""
	Lisp names are unusually permissive and can contain many characters that
	Sail names cannot.  Similarly, Lisp names are case-insensitive.  This
	function transforms Lisp names to valid Sail names.

	Args:
		- symbol : str
	Return:
		str
	"""
	# Exceptions to the rule below.  Normally `-`, `+` and `!` are replaced
	# but we do not wish to transform `-`, `+` or `!=`.
	if symbol in ['-', '+', '!=']:
		return symbol

	# The words `val` and `type` are reserved in Sail, prepend the word `sail`.
	if symbol.lower() in ['val', 'type']:
		return f'sail{symbol.lower()}'

	# Some startswith rules
	replaceMap = {'!': 'write_',
				  '64': 'n64',
				  '32': 'n32',
				  '16': 'n16',
				  '1': 'one_',
				  '3': 'three_',
				  '5': 'five_',
				  '7': 'seven_',
				  '9': 'nine_'}
	for sw, r in replaceMap.items():
		if symbol.startswith(sw):
			symbol = r + symbol[len(sw):]

	# Register and function names cannot be shadowed in Sail.  This part
	# appends '_var` to such names.
	# TODO: get these automatically
	regNames = ['register', 'rflags', 'rip', 'msrs',
				'seg-visibles', 'seg-hidden-attrs', 'seg-hidden-bases', 'seg-hidden-limits', 'zmms', 'ctrs',
				'rax', 'rbx', 'rcx', 'rdx', 'rsi', 'rdi', 'rsp', 'rbp',
				'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', 'r15']
	functionNames = ['n64-bit-modep', 'mod', 'page-present', 'page-size']
	if includeFnNames:
		shadowedNames = regNames + functionNames
	else:
		shadowedNames = regNames
	if symbol.lower() in shadowedNames and avoidShadowed:
		symbol = symbol + '_var'

	# General rules
	# - Replacing -> with _get_ is really just for when functions are manually defined in the ACL2
	#   whose names involve ->, rather than for the automatically defined ones generated by defbitstruct.
	symbol = symbol.replace("->", "_get_")\
					.replace("-", "_")\
					.replace("/", "_")\
					.replace(".", "_")\
					.replace("+", "_plus_")\

	if lower:
		symbol = symbol.lower()\
						.replace("*ip", "iptr")\
						.replace("*sp", "sptr")

	if not symbol[0].isalpha() and symbol[0] not in ['_', '#'] and not infix:
		symbol = '_' + symbol

	return symbol

def unionListOfSets(los):
	"""
	Takes the union of a list of sets.  Works even when the list is empty as
	per this technique:
	https://stackoverflow.com/questions/31253109/how-can-i-find-the-union-on-a-list-of-sets-in-python#comment104577400_31253153

	Args:
		los: [set()] - a list of sets

	Returns:
		set()
	"""
	return set.union(*[set(), *los])

def dictExtend(orig, additions):
	"""
	For each element in additions, if the key is not in orig, adds the
	(key, value) pair.  If key is in orig, adds to the Set in orig accordingly

	Args:
		- orig : {'a : Set('b)}
		- additions: {'a : Set('b)}
	Returns:
		- {'a : Set('b)}
	"""
	for (k, v) in additions.items():
		if k in orig:
			orig[k].union(v)
		else:
			orig[k] = v

	return orig
